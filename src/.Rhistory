start<-(bamDataPE2)
start(bamDataPE2)
rm(start)
first(dumpBamDataPE)
left(dumpBamDataPE)
?left
?rsamtools
?ramtools
?Rsamtools
dumpBamDataPE
scanBamFlag(dumpBamDataPE)
p0 <- ScanBamParam()
p0
which <- RangesList(seq1=IRanges(1000, 2000),
seq2=IRanges(c(100, 1000), c(1000, 2000)))
p1 <- ScanBamParam(which=which)
p1
rm(p0)
rm(p1)
rm(which)
scanBam(dumpBamDataPE, param=ScanBamParam(flag=scanBamFlag(isFirstMateRead=TRUE)))
fl <- system.file("extdata", "ex1.bam", package="Rsamtools",
mustWork=TRUE)
class(fl)
fl
rm(fl)
isFirstMatePrmt <- ScanBamParam(flag = scanBamFlag(isPaired=TRUE, isProperPair=TRUE, isFirstMateRead=TRUE))
firstMateBamDataPE <- scanBam(bamFilePE, param=isFirstMatePrmt)
head(firstMateBamDataPE)
bamFilePE
head(firstMateBamDataPE[[1]])
(firstMateBamDataPE[[1]]
)
lapply(firstMateBamDataPE, head)
p2 <- ScanBamParam(flag=scanBamFlag(isMinusStrand=FALSE))
firstMateBamDataPE <- scanBam(bamFilePE, param=p2)
lapply(firstMateBamDataPE[[1]], head)
firstMateBamDataPE[[1]]
bamFilePE
p2 <- ScanBamParam(flag=scanBamFlag(isMinusStrand=FALSE))
fl <- system.file("extdata", "ex1.bam", package="Rsamtools",
mustWork=TRUE)
res <- scanBam(fl, param=p2)[[1]]
lapply(res, head)
rm (fl)
rm(res)
rm(p2)
firstMateBamDataPE
firstMateBamDataPE[[1]]
head(firstMateBamDataPE[[1]])
head(bamDataPE2)
isFirstMatePrmt <- ScanBamParam(flag = scanBamFlag(isPaired=TRUE, isProperPair=TRUE, isFirstMateRead=TRUE), what=c('qname', 'rname', 'strand', 'cigar', 'qwidth', 'start','end', 'width', 'ngap'))
?scanBamWhat
isFirstMatePrmt <- ScanBamParam(flag = scanBamFlag(isPaired=TRUE, isProperPair=TRUE, isFirstMateRead=TRUE), what=scanBamWhat(c('qname', 'rname', 'strand', 'cigar', 'qwidth', 'start','end', 'width', 'ngap')))
isFirstMatePrmt <- ScanBamParam(flag = scanBamFlag(isPaired=TRUE, isProperPair=TRUE, isFirstMateRead=TRUE), what=scanBamWhat(('qname', 'rname', 'strand', 'cigar', 'qwidth', 'start','end', 'width', 'ngap'))
isFirstMatePrmt <- ScanBamParam(flag = scanBamFlag(isPaired=TRUE, isProperPair=TRUE, isFirstMateRead=TRUE), what=scanBamWhat())
isFirstMatePrmt
firstMateBamDataPE <- scanBam(bamFilePE, param=isFirstMatePrmt)
firstMateBamDataPE[[1]]
lapply(firstMateBamDataPE[[1]], head)
class(firstMateBamDataPE[[1]])
class(firstMateBamDataPE)
?coverage
?grglist
?coverage
?left
isFirstMatePrmt <- ScanBamParam(flag = scanBamFlag(isPaired=TRUE, isProperPair=TRUE, isFirstMateRead=TRUE), what=scanBamWhat())
first(bamDataPE2)
af <- first(bamDataPE)
head(af)
coverage(grglist(af))
dumpBamDataPE
list()
list
getwd()
ls
ls()
list.files()
list.files(full.names=T)
testParentPath <- "/Users/yunyan/Yun_Codes/Fool/ScanningPyTest/alignment"
list.files(testParentPath)
list.files(testParentPath, full.names=T)
list.dirs(testParentPath, full.names=T)
list.files(testParentPath, full.names=T)
dumpBamDataPE
?readGAlignments
bamFilePE
bamDataPE2 <- readGAlignments(bamFilePE, format="BAM")
cvgPE2 <- coverage(bamDataPE2)
cvgPE2
cvgPE2[[4]][9254794:9254820]
as.numeric(cvgPE2[[4]][9254794:9254820])
bamDataPE2 <- readGAlignments(bamFilePE, format="BAM",  drop.D.ranges=T)
cvgPE2 <- coverage(bamDataPE2)
as.numeric(cvgPE2[[4]][9254794:9254820])
bamDataPE2 <- readGAlignments(bamFilePE, format="BAM")
head(bamDataPE2)
left(bamDataPE2)
cvgPE2 <- coverage(grglist(bamDataPE2, drop.D.ranges=T))
log <- read.table("~/Yun_Codes/Fool/ScanningPyTest/alignment/log", quote="\"")
View(log)
?aggregate
class(log$V2)
log$flag <- as.factor(log$V2)
View(log)
class(log$flag)
levels(log$flag)
?ddply
library(plry)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?ddply
ddply(log, flag, summarize, number = sum(V1))
ddply(log, .(flag), summarize, number = sum(V1))
log2 <- log[1:8, ]
ddply(log2, .(flag), summarize, number = sum(V1))
rm(log2)
ddply(log, .(flag), summarize, number = sum(V1))
log$flag <- factor(x=log$V2)
levels(log$flag)
log$bioflag <- factor(x=log$V2, labels=c("Neg1st", "Pos1st", "Neg2nd", "Pos2nd", "Neg1st", "Pos1st", "Neg2nd", "Pos2nd"))
log$bioflag <- as.factor(x=log$V2, labels=c("Neg1st", "Pos1st", "Neg2nd", "Pos2nd", "Neg1st", "Pos1st", "Neg2nd", "Pos2nd"))
log$bioflag <- as.factor(x=log$V2, labels=c("Neg1sta", "Pos1sta", "Neg2nda", "Pos2nda", "Neg1stb", "Pos1stb", "Neg2ndb", "Pos2ndb"))
log$bioflag <- factor(x=log$V2, levels=c("Neg1st", "Pos1st", "Neg2nd", "Pos2nd", "Neg1st", "Pos1st", "Neg2nd", "Pos2nd"))
log$bioflag <- as.factor(x=log$V2, levels=c("Neg1st", "Pos1st", "Neg2nd", "Pos2nd", "Neg1st", "Pos1st", "Neg2nd", "Pos2nd"))
log$bioflag <- as.factor(x=log$V2, levels=c("Neg1sta", "Pos1sta", "Neg2nda", "Pos2nda", "Neg1stb", "Pos1stb", "Neg2ndb", "Pos2ndb"))
class(log$V2)
detach("package:IRanges", unload=TRUE)
library("IRanges", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
log$bioflag <- factor(x=log$V2, levels=c("Neg1sta", "Pos1sta", "Neg2nda", "Pos2nda", "Neg1stb", "Pos1stb", "Neg2ndb", "Pos2ndb"))
log$bioflag <- factor(x=log$V2, levels=c("Neg1st", "Pos1st", "Neg2nd", "Pos2nd", "Neg1st", "Pos1st", "Neg2nd", "Pos2nd"))
log$bioflag <- factor(x=log$V2, levels=c("Neg1sta", "Pos1sta", "Neg2nda", "Pos2nda", "Neg1stb", "Pos1stb", "Neg2ndb", "Pos2ndb"))
View(log)
log$bioflag <- factor(x=log$V2, levels=c("Neg1sta", "Pos1sta", "Neg2nda", "Pos2nda", "Neg1stb", "Pos1stb", "Neg2ndb", "Pos2ndb"))
View(log)
3502558 + 2069944
sum(log$V1)
3502558 * 2
3502558 + 653279
save.image("~/Yun_Codes/Fool/MyAthcotrxPackageData.RData")
ls()
rm(bamDataPE)
?first
getMethods(first)
getMethod(first)
getMethods(first)
param1stNeg <- ScanBamParam(
what = c("isize"),
flag = scanBamFlag(
isProperPair = TRUE,
isMinusStrand = TRUE,
isFirstMateRead = TRUE
)
)
param1stPos <- ScanBamParam(
what = c("isize"),
flag = scanBamFlag(
isProperPair = TRUE,
isMinusStrand = FALSE,
isFirstMateRead = TRUE
)
)
param2ndNeg <- ScanBamParam(
what = c("isize"),
flag = scanBamFlag(
isProperPair = TRUE,
isMinusStrand = TRUE,
isSecondMateRead = TRUE
)
)
param2ndPos <- ScanBamParam(
what = c("isize"),
flag = scanBamFlag(
isProperPair = TRUE,
isMinusStrand = FALSE,
isSecondMateRead = TRUE
)
)
bamDataPE1stNeg <- readGAlignmentsList(
file = bamFilePE,
param= param1stNeg,
format="BAM"
)
bamDataPE1stPos <- readGAlignmentsList(
file = bamFilePE,
param= param1stPos,
format="BAM"
)
bamDataPE2ndNeg <- readGAlignmentsList(
file = bamFilePE,
param= param2ndNeg,
format="BAM"
)
bamDataPE2ndPos <- readGAlignmentsList(
file = bamFilePE,
param= param2ndPos,
format="BAM"
)
library("Athcotrx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
param1stNeg <- ScanBamParam(
what = c("isize"),
flag = scanBamFlag(
isProperPair = TRUE,
isMinusStrand = TRUE,
isFirstMateRead = TRUE
)
)
param1stPos <- ScanBamParam(
what = c("isize"),
flag = scanBamFlag(
isProperPair = TRUE,
isMinusStrand = FALSE,
isFirstMateRead = TRUE
)
)
param2ndNeg <- ScanBamParam(
what = c("isize"),
flag = scanBamFlag(
isProperPair = TRUE,
isMinusStrand = TRUE,
isSecondMateRead = TRUE
)
)
param2ndPos <- ScanBamParam(
what = c("isize"),
flag = scanBamFlag(
isProperPair = TRUE,
isMinusStrand = FALSE,
isSecondMateRead = TRUE
)
)
bamDataPE1stNeg <- readGAlignmentsList(
file = bamFilePE,
param= param1stNeg,
format="BAM"
)
bamDataPE1stPos <- readGAlignmentsList(
file = bamFilePE,
param= param1stPos,
format="BAM"
)
bamDataPE2ndNeg <- readGAlignmentsList(
file = bamFilePE,
param= param2ndNeg,
format="BAM"
)
bamDataPE2ndPos <- readGAlignmentsList(
file = bamFilePE,
param= param2ndPos,
format="BAM"
)
rm(a)
rm(testbamNeg)
rm (testbamPos)
rm(bamNeg)
rm(bamPos)
bamDataPE2ndPos <- readGAlignmentsList(
file = bamFilePE,
param= param2ndPos,
format="BAM"
)
coverageBamGenome <- function(readBamObj) {
cvg <- coverage(grglist(readBamObj,drop.D.ranges = TRUE))
return (cvg)
}
cvg1stNeg <- coverageBamGenome(bamDataPE1stNeg)
?coverage
save.image("~/Yun_Codes/Fool/MyAthcotrxPackageDataPE.RData")
packageVersion("ShortRead")
?readGAlignmentsList
packageVersion("GenomicRanges")
?grglist
head(bamDataPE2ndPos)
t <- head(bamDataPE2ndPos)
t
grglist(t, drop.D.ranges=T)
?coverage
coverage(grglist(t, drop.D.ranges=T))
t
class(t)
t_grglist <- grglist(t, drop.D.ranges=T)
t_grglist
class(t_grglist)
?grglist
t <- as.numeric(cvgNeg[[1]])[200:230]
t
class(t)
t[1]
t > 0
all(t>0)
length(t > 0 )
length(t[t>0] )
t[t>0]
length(t[t>0])
length(t)
t <- rep(NA, 3)
t
t == 0
t > 0
ifelse(t==NA, FALSE, t)
ifelse(t %in% NA, FALSE, t)
allNumberLargerThanNull <- function(num_string){
num_string <- ifelse(num_string %in% NA, FALSE, num_string)
trueORfalse <- all(num_string > 0)
trueLength <- length(num_string[num_string > 0 ])
return (c(trueORfalse, trueLength))
}
allNumberLargerThanNull(t)
names(t)
allNumberLargerThanNull <- function(num_string){
num_string <- ifelse(num_string %in% NA, FALSE, num_string)
trueORfalse <- all(num_string > 0)
trueLength <- length(num_string[num_string > 0 ])
result <- c(trueORfalse, trueLength)
names(result) <- c("All_Larger?", "Length > 0")
return (result)
}
allNumberLargerThanNull(t)
class(t)
t[1]
allNumberLargerThanNull <- function(num_string){
num_string <- ifelse(num_string %in% NA, FALSE, num_string)
trueORfalse <- all(num_string > 0)
trueLength <- length(num_string[num_string > 0 ])
result <- list()
result[[1]] <- trueORfalse
result[[2]] <- trueLength)
return (result)
}
allNumberLargerThanNull <- function(num_string){
num_string <- ifelse(num_string %in% NA, FALSE, num_string)
trueORfalse <- all(num_string > 0)
trueLength <- length(num_string[num_string > 0 ])
result <- list()
result[[1]] <- trueORfalse
result[[2]] <- trueLength
return (result)
}
allNumberLargerThanNull(t)
t[[1]]
allNumberLargerThanNull(t)[[1]]
allNumberLargerThanNull <- function(num_string){
num_string <- ifelse(num_string %in% NA, FALSE, num_string)
trueORfalse <- all(num_string > 0)
trueLength <- length(num_string[num_string > 0 ])
result <- c(as.logical(trueORfalse), trueLength)
names(result) <- c("All_Larger?", "Length > 0")
return (result)
}
allNumberLargerThanNull(t)[[1]]
allNumberLargerThanNull(t)
as.logical(1)
as.logical(0)
allNumberLargerThanNull <- function(num_string){
num_string <- ifelse(num_string %in% NA, FALSE, num_string)
trueORfalse <- (all(num_string > 0))
trueLength <- length(num_string[num_string > 0 ])
result <- c(as.logical(trueORfalse), trueLength)
names(result) <- c("All_Larger?", "Length > 0")
return (result)
}
allNumberLargerThanNull(t)
class(allNumberLargerThanNull(t))
allNumberLargerThanNull <- function(num_string){
num_string <- ifelse(num_string %in% NA, FALSE, num_string)
trueORfalse <- (all(num_string > 0))
result[1] <- trueORfalse
trueLength <- length(num_string[num_string > 0 ])
result[2] <- trueLength
names(result) <- c("All_Larger?", "Length > 0")
return (result)
}
class(allNumberLargerThanNull(t))
allNumberLargerThanNull <- function(num_string){
num_string <- ifelse(num_string %in% NA, FALSE, num_string)
trueORfalse <- (all(num_string > 0))
result[1] <- trueORfalse
trueLength <- length(num_string[num_string > 0 ])
result[2] <- trueLength
names(result) <- c("All_Larger?", "Length > 0")
return (result)
}
allNumberLargerThanNull(t)
?getseq
?getSeq
library("AnnotationDbi", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?getSeq
1> 2 & 2>3
1> 2 && 2>3
1> 2 & 2>3
(1>2) or (2<3)
(1>2) || (2<3)
(1>2) and (2<3)
(1>2) && (2<3)
?&
a <-()
a <- c()
length(a)
a <- function(a){
print (length(a))
}
a
a()
a <- function(x){print(length(x))}
a()
class(a)
a <- function(x){ if (! x ){print "NA"}}
a <- function(x){ if (! x ) {print "NA"}}
a <- function(x){ if (not x ) {print "NA"}}
?stop
?warning
biocLite("BSgenome.Athaliana.TAIR.TAIR9")
library("BiocInstaller", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
biocLite("BSgenome.Athaliana.TAIR.TAIR9")
library("BSgenome.Athaliana.TAIR.TAIR9")
?getSeq
getSeq(Athaliana, "Chr1", 200, 202)
askForGenomeSeq <- function(genomeFasta, chrString, startSite, endSite){
getSeq(genomeFasta, chrString, startSite, endSite)
}
askForGenomeSeq(Athaliana, "Chr1", 200, 202)
a <- as.character(askForGenomeSeq(Athaliana, "Chr1", 200, 202))
a
reverse(a)
?reverseComplement
reverseComplement(a)
reverseComplement(askForGenomeSeq(Athaliana, "Chr1", 200, 202))
ls()
ls()
?flank
library("BSgenome.Athaliana.TAIR.TAIR9", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?flank
?IRanges
?endoapply
a <- data.frame(x = 1:10, y = rnorm(10))
endoapply(a, function(x) (x - mean(x))/sd(x))
a
a <- data.frame(x = 1:10, y = 10:1)
endoapply(a, function(x) (x - mean(x)))
a
mean(a[1,])
a
a[1,]
mean(a[1,])
1 - 11/2
endoapply(a, function(x) identical(x))
?identical
a
a$x == a$y
?GRanges
Seqinfo(paste0("chr", 1:3), c(1000, 2000, 1500), NA, "mock1")
?SeqInfo
?Rle
?density
library("Rsamtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?density
?density
?Views
?countOverlaps
showClass("Views")
subject <- Rle(3:-6)
v1 <- Views(subject, start=4:1, end=4:7)
v1
subject
v1[[2]]
v1
width(v1)
v1[,4]
dim(v1)
v1[1]
v1[[1]]
?as
?reduce
example(GRanges)
mycov = coverage(longGR)
mycov
rle.i = slice(mycov, lower=3)
rle.i
gr = as (rle.i, "GRanges")
reduce(gr)
?slice
x <- IRanges(start=c(1L, 9L, 4L, 1L, 5L, 10L),
width=c(5L, 6L, 3L, 4L, 3L,  3L))
cvg <- coverage(x)
slice(cvg, lower=2)
cvg
?viewMeans
as.data.frame
?as.data.frame
?seq
getwd()
setwd("Yun_Codes/Rtist//src")
cdata <- read.dta("http://www.ats.ucla.edu/stat/data/crime.dta")
cdata <- read.data("http://www.ats.ucla.edu/stat/data/crime.dta")
data(iris)
iris
head(iris)
library(lattice)
install.packages("GGally")
library(GGally)
ggpairs(iris[,1:4])
ggpairs(iris[,1:4]) + labs(title = "test")
ggpairs(iris[,1:4], title="test")
ggpairs(iris[,1:4], upper = list(continuous = "cor"))
?putPlot
a <- ggpairs(iris[,1:4], upper = list(continuous = "cor"))
b <- qplot(1:100)
print(b)
putPlot(a, b, 2, 3)
a <- ggpairs(iris[,1:4], upper = list(continuous = "cor"), lower = list(continuous = "points", combo = "dot"))
print(a)
a <- ggpairs(iris[,1:4], upper = list(continuous = "cor"), lower = list(combo = "dot"))
print(a)
